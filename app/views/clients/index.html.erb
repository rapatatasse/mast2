<p style="color: green"><%= notice %></p>

<div class="container-fluid mt-4">
  <div class="row mb-3">
    <div class="col-md-6">
      <h1>Clients</h1>
    </div>
    <div class="col-md-6 text-end">
      <%= link_to "Nouveau client", new_client_path, class: "btn btn-primary" %>
    </div>
  </div>

  <div class="row mb-3">
    <div class="col-md-6">
      <input type="text" id="searchInput" class="form-control" placeholder="Rechercher...">
    </div>
    <div class="col-md-6 text-end">
      <button id="exportCSV" class="btn btn-success">
        <i class="bi bi-file-earmark-spreadsheet"></i> Export CSV
      </button>
      <button id="exportJSON" class="btn btn-info">
        <i class="bi bi-filetype-json"></i> Export JSON
      </button>
    </div>
  </div>

  <div class="table-responsive">
    <table class="table table-striped table-hover" id="clientsTable">
      <thead class="table-dark">
        <tr>
          <th onclick="sortTable(0)">ID <i class="bi bi-arrow-down-up"></i></th>
          <th onclick="sortTable(1)">Nom <i class="bi bi-arrow-down-up"></i></th>
          <th onclick="sortTable(2)">Prénom <i class="bi bi-arrow-down-up"></i></th>
          <th onclick="sortTable(3)">Description <i class="bi bi-arrow-down-up"></i></th>
          <th onclick="sortTable(4)">Date début <i class="bi bi-arrow-down-up"></i></th>
          <th onclick="sortTable(5)">Date fin <i class="bi bi-arrow-down-up"></i></th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="clientsTableBody">
        <% @clients.each do |client| %>
          <tr>
            <td><%= client.id %></td>
            <td><%= client.nom %></td>
            <td><%= client.prenom %></td>
            <td><%= client.description %> (<%= client.user.email %>)</td>
            <td><%= client.date_debut %></td>
            <td><%= client.date_fin %></td>
            <td>
              <%= link_to client_path(client), class: "btn btn-sm btn-info", title: "Voir" do %>
                <i class="bi bi-eye"></i>
              <% end %>
              <%= link_to edit_client_path(client), class: "btn btn-sm btn-warning", title: "Éditer" do %>
                <i class="bi bi-pencil"></i>
              <% end %>
              <%= button_to client_path(client), method: :delete, class: "btn btn-sm btn-danger", title: "Supprimer", form: { data: { turbo_confirm: "Êtes-vous sûr?" }, style: "display: inline;" } do %>
                <i class="bi bi-trash"></i>
              <% end %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
// Fonction de recherche/filtre
document.getElementById('searchInput').addEventListener('keyup', function() {
  const searchValue = this.value.toLowerCase();
  const table = document.getElementById('clientsTableBody');
  const rows = table.getElementsByTagName('tr');

  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const cells = row.getElementsByTagName('td');
    let found = false;

    for (let j = 0; j < cells.length - 1; j++) { // -1 pour exclure la colonne Actions
      if (cells[j].textContent.toLowerCase().includes(searchValue)) {
        found = true;
        break;
      }
    }

    row.style.display = found ? '' : 'none';
  }
});

// Fonction de tri
let sortDirection = {};
function sortTable(columnIndex) {
  const table = document.getElementById('clientsTable');
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr'));
  
  // Initialiser la direction de tri pour cette colonne
  if (!sortDirection[columnIndex]) {
    sortDirection[columnIndex] = 'asc';
  } else {
    sortDirection[columnIndex] = sortDirection[columnIndex] === 'asc' ? 'desc' : 'asc';
  }
  
  const direction = sortDirection[columnIndex];
  
  rows.sort((a, b) => {
    const aValue = a.cells[columnIndex].textContent.trim();
    const bValue = b.cells[columnIndex].textContent.trim();
    
    // Essayer de comparer comme nombres
    const aNum = parseFloat(aValue);
    const bNum = parseFloat(bValue);
    
    if (!isNaN(aNum) && !isNaN(bNum)) {
      return direction === 'asc' ? aNum - bNum : bNum - aNum;
    }
    
    // Sinon comparer comme texte
    if (direction === 'asc') {
      return aValue.localeCompare(bValue);
    } else {
      return bValue.localeCompare(aValue);
    }
  });
  
  // Réinsérer les lignes triées
  rows.forEach(row => tbody.appendChild(row));
}

// Export CSV
document.getElementById('exportCSV').addEventListener('click', function() {
  const table = document.getElementById('clientsTable');
  const rows = table.querySelectorAll('tr');
  let csv = [];
  
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const cols = row.querySelectorAll('td, th');
    let csvRow = [];
    
    for (let j = 0; j < cols.length - 1; j++) { // -1 pour exclure Actions
      let data = cols[j].textContent.trim();
      data = data.replace(/"/g, '""'); // Échapper les guillemets
      csvRow.push('"' + data + '"');
    }
    
    csv.push(csvRow.join(','));
  }
  
  const csvContent = csv.join('\n');
  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', 'clients_' + new Date().toISOString().split('T')[0] + '.csv');
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
});

// Export JSON
document.getElementById('exportJSON').addEventListener('click', function() {
  const table = document.getElementById('clientsTable');
  const headers = [];
  const headerCells = table.querySelectorAll('thead th');
  
  for (let i = 0; i < headerCells.length - 1; i++) { // -1 pour exclure Actions
    headers.push(headerCells[i].textContent.trim().split(' ')[0]); // Prendre seulement le texte avant l'icône
  }
  
  const rows = table.querySelectorAll('tbody tr');
  const data = [];
  
  rows.forEach(row => {
    if (row.style.display !== 'none') { // Seulement les lignes visibles
      const cells = row.querySelectorAll('td');
      const rowData = {};
      
      for (let i = 0; i < cells.length - 1; i++) { // -1 pour exclure Actions
        rowData[headers[i]] = cells[i].textContent.trim();
      }
      
      data.push(rowData);
    }
  });
  
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', 'clients_' + new Date().toISOString().split('T')[0] + '.json');
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
});

// Ajouter un style pour les en-têtes cliquables
document.querySelectorAll('#clientsTable thead th[onclick]').forEach(th => {
  th.style.cursor = 'pointer';
  th.style.userSelect = 'none';
});
</script>

<style>
  .table thead th {
    vertical-align: middle;
  }
  
  .table thead th[onclick]:hover {
    background-color: #495057 !important;
  }
  
  .btn-group-actions {
    white-space: nowrap;
  }
</style>
